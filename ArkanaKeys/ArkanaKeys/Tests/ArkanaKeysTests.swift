// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import XCTest
@testable import ArkanaKeys

final class KeysTests: XCTestCase {
    private var salt: [UInt8] = [
        0xaa, 0x4f, 0x20, 0x25, 0x31, 0x2a, 0x9d, 0x33, 0x9c, 0xb4, 0x4c, 0xcf, 0x7e, 0xc3, 0x1b, 0x38, 0x86, 0xd2, 0xef, 0x8a, 0xd7, 0x1f, 0xef, 0x80, 0xc8, 0x7, 0x4b, 0xa1, 0x9, 0x82, 0x3c, 0xbe, 0x6e, 0x16, 0x7e, 0x9b, 0x36, 0x49, 0x51, 0x40, 0xd0, 0xa5, 0xb8, 0xb8, 0x40, 0xa7, 0x59, 0x77, 0xab, 0x5a, 0x42, 0x37, 0x49, 0xb1, 0xf7, 0xb2, 0x68, 0xea, 0xb2, 0xff, 0x83, 0x1a, 0xf7, 0xe7
    ]

    func test_decodeRandomHexKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x9e, 0x2e, 0x18, 0x47, 0x3, 0x1d, 0xad, 0x7, 0xa8, 0xd6, 0x79, 0xf8, 0x1d, 0xa1, 0x29, 0x5a, 0xb6, 0xe2, 0xdb, 0xbd, 0xb2, 0x2c, 0xd7, 0xe6, 0xa9, 0x37, 0x79, 0x97, 0x6a, 0xb0, 0x5a, 0xdd, 0x58, 0x24, 0x4c, 0xff, 0xe, 0x7c, 0x60, 0x23, 0xe8, 0xc1, 0x8b, 0x8c, 0x21, 0x91, 0x6a, 0x4e, 0xcd, 0x3b, 0x26, 0x1, 0x28, 0xd3, 0x92, 0x81, 0x5d, 0x88, 0x81, 0xc9, 0xe1, 0x2a, 0xc7, 0xd2, 0x9a, 0x2b, 0x15, 0x46, 0x57, 0x48, 0xa4, 0x56, 0xaf, 0x87, 0x7d, 0xfe, 0x46, 0xfa, 0x29, 0xc, 0xe0, 0xe7, 0x89, 0xb2, 0xb2, 0x29, 0xd7, 0xb4, 0xaa, 0x64, 0x2a, 0x93, 0x3f, 0xb0, 0xb, 0x86, 0xa, 0x27, 0x4d, 0xab, 0xe, 0x7d, 0x32, 0x78, 0xe5, 0x91, 0xdc, 0x89, 0x74, 0xc6, 0x6f, 0x40, 0x92, 0x3b, 0x7a, 0x1, 0x70, 0xd4, 0x92, 0x83, 0x59, 0xde, 0x85, 0x9e, 0xe6, 0x28, 0x92, 0xd0
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "4a8b27044b57cb2b0047e38fa026c2fc622d851c8d34a639fad6abe35b36b0050d5cfb9e33118924f5f8e684bca26278d13084c854d14a679a869ee1147ae2e7")
    }

    func test_decodeRandomBase64Key_shouldDecode() {
        let encoded: [UInt8] = [
            0xd3, 0x2d, 0x18, 0x7c, 0x5f, 0x18, 0xaa, 0x56, 0xff, 0xf3, 0x7d, 0xf8, 0xe, 0xec, 0x22, 0x56, 0xd2, 0xa0, 0xbb, 0xfb, 0x9f, 0x7c, 0xd9, 0xb2, 0xa7, 0x68, 0x2c, 0xc7, 0x3a, 0xc3, 0xd, 0xd2, 0x5b, 0x2f, 0x34, 0xf6, 0x60, 0x78, 0x4, 0x6f, 0x84, 0xee, 0xea, 0xd7, 0xb, 0xdd, 0x3f, 0x23, 0xdb, 0x37, 0x8, 0x54, 0x3d, 0xd5, 0x93, 0xff, 0x31, 0xba, 0xf8, 0xc7, 0xd6, 0x4f, 0x87, 0xb2, 0xc3, 0x7e, 0x77, 0x51, 0x61, 0x5c, 0xda, 0x55, 0xae, 0xdb, 0x3f, 0xb7, 0xc, 0xf6, 0x63, 0x76, 0xcd, 0xe4, 0x8b, 0xec, 0xa0, 0x78, 0xd2, 0xbd
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "yb8Yn27ecG17p/9nTrTqHc62oogf3A1l59JmV1U/TKRoKzfTpmJctddMYPJ8UUpUi1WtPvGf2osxr5xNK6dfwg==")
    }

    func test_decodeUUIDKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x9e, 0x7a, 0x11, 0x16, 0x52, 0x13, 0xab, 0x1, 0xb1, 0xd6, 0x7f, 0xfb, 0x4e, 0xee, 0x2f, 0x59, 0xe2, 0xb7, 0xc2, 0xb3, 0xe3, 0x7c, 0xda, 0xad, 0xae, 0x61, 0x29, 0x92, 0x3f, 0xb6, 0x5f, 0x86, 0x58, 0x2e, 0x4f, 0xfe
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "4513c962-b340-4ade-94c5-ffb364c8681e")
    }
}
