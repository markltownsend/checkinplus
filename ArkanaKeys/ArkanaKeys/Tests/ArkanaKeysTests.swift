// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

@testable import ArkanaKeys
import Foundation
import XCTest

final class KeysTests: XCTestCase {
    private var salt: [UInt8] = [
        0xAA, 0x4F, 0x20, 0x25, 0x31, 0x2A, 0x9D, 0x33, 0x9C, 0xB4, 0x4C, 0xCF, 0x7E, 0xC3, 0x1B, 0x38, 0x86, 0xD2, 0xEF, 0x8A, 0xD7, 0x1F, 0xEF, 0x80, 0xC8, 0x7, 0x4B, 0xA1, 0x9, 0x82, 0x3C, 0xBE, 0x6E, 0x16, 0x7E, 0x9B, 0x36, 0x49, 0x51, 0x40, 0xD0, 0xA5, 0xB8, 0xB8, 0x40, 0xA7, 0x59, 0x77, 0xAB, 0x5A, 0x42, 0x37, 0x49, 0xB1, 0xF7, 0xB2, 0x68, 0xEA, 0xB2, 0xFF, 0x83, 0x1A, 0xF7, 0xE7,
    ]

    func test_decodeRandomHexKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x9E, 0x2E, 0x18, 0x47, 0x3, 0x1D, 0xAD, 0x7, 0xA8, 0xD6, 0x79, 0xF8, 0x1D, 0xA1, 0x29, 0x5A, 0xB6, 0xE2, 0xDB, 0xBD, 0xB2, 0x2C, 0xD7, 0xE6, 0xA9, 0x37, 0x79, 0x97, 0x6A, 0xB0, 0x5A, 0xDD, 0x58, 0x24, 0x4C, 0xFF, 0xE, 0x7C, 0x60, 0x23, 0xE8, 0xC1, 0x8B, 0x8C, 0x21, 0x91, 0x6A, 0x4E, 0xCD, 0x3B, 0x26, 0x1, 0x28, 0xD3, 0x92, 0x81, 0x5D, 0x88, 0x81, 0xC9, 0xE1, 0x2A, 0xC7, 0xD2, 0x9A, 0x2B, 0x15, 0x46, 0x57, 0x48, 0xA4, 0x56, 0xAF, 0x87, 0x7D, 0xFE, 0x46, 0xFA, 0x29, 0xC, 0xE0, 0xE7, 0x89, 0xB2, 0xB2, 0x29, 0xD7, 0xB4, 0xAA, 0x64, 0x2A, 0x93, 0x3F, 0xB0, 0xB, 0x86, 0xA, 0x27, 0x4D, 0xAB, 0xE, 0x7D, 0x32, 0x78, 0xE5, 0x91, 0xDC, 0x89, 0x74, 0xC6, 0x6F, 0x40, 0x92, 0x3B, 0x7A, 0x1, 0x70, 0xD4, 0x92, 0x83, 0x59, 0xDE, 0x85, 0x9E, 0xE6, 0x28, 0x92, 0xD0,
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "4a8b27044b57cb2b0047e38fa026c2fc622d851c8d34a639fad6abe35b36b0050d5cfb9e33118924f5f8e684bca26278d13084c854d14a679a869ee1147ae2e7")
    }

    func test_decodeRandomBase64Key_shouldDecode() {
        let encoded: [UInt8] = [
            0xD3, 0x2D, 0x18, 0x7C, 0x5F, 0x18, 0xAA, 0x56, 0xFF, 0xF3, 0x7D, 0xF8, 0xE, 0xEC, 0x22, 0x56, 0xD2, 0xA0, 0xBB, 0xFB, 0x9F, 0x7C, 0xD9, 0xB2, 0xA7, 0x68, 0x2C, 0xC7, 0x3A, 0xC3, 0xD, 0xD2, 0x5B, 0x2F, 0x34, 0xF6, 0x60, 0x78, 0x4, 0x6F, 0x84, 0xEE, 0xEA, 0xD7, 0xB, 0xDD, 0x3F, 0x23, 0xDB, 0x37, 0x8, 0x54, 0x3D, 0xD5, 0x93, 0xFF, 0x31, 0xBA, 0xF8, 0xC7, 0xD6, 0x4F, 0x87, 0xB2, 0xC3, 0x7E, 0x77, 0x51, 0x61, 0x5C, 0xDA, 0x55, 0xAE, 0xDB, 0x3F, 0xB7, 0xC, 0xF6, 0x63, 0x76, 0xCD, 0xE4, 0x8B, 0xEC, 0xA0, 0x78, 0xD2, 0xBD,
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "yb8Yn27ecG17p/9nTrTqHc62oogf3A1l59JmV1U/TKRoKzfTpmJctddMYPJ8UUpUi1WtPvGf2osxr5xNK6dfwg==")
    }

    func test_decodeUUIDKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x9E, 0x7A, 0x11, 0x16, 0x52, 0x13, 0xAB, 0x1, 0xB1, 0xD6, 0x7F, 0xFB, 0x4E, 0xEE, 0x2F, 0x59, 0xE2, 0xB7, 0xC2, 0xB3, 0xE3, 0x7C, 0xDA, 0xAD, 0xAE, 0x61, 0x29, 0x92, 0x3F, 0xB6, 0x5F, 0x86, 0x58, 0x2E, 0x4F, 0xFE,
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "4513c962-b340-4ade-94c5-ffb364c8681e")
    }
}
